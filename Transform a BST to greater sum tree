By leveraging the fact that the tree is a BST, we can find an O(n) solution.
The idea is to traverse BST in reverse inorder.
Reverse inorder traversal of a BST gives us keys in decreasing order.
Before visiting a node, we visit all greater nodes of that node.
While traversing we keep track of the sum of keys which is the sum of all the keys greater than the key of the current node. 

// Recursive function to transform a BST to sum tree.
  // This function traverses the tree in reverse inorder so
  // that we have visited all greater key nodes of the currently
  // visited node
  static void transformTreeUtil(Node root)
  {
 
    // Base case
    if (root == null) 
      return;
 
    // Recur for right subtree
    transformTreeUtil(root.right);
 
    // Update sum
    sum = sum + root.data;
 
    // Store old sum in current node
    root.data = sum - root.data;
 
    // Recur for left subtree
    transformTreeUtil(root.left);
  }
 // 2nd METHOD
 class Solution {
    public int sum=0;
    public TreeNode bstToGst(TreeNode root) {
         if(root!=null){
			bstToGst(root.right);
			sum+=root.val;
			root.val=sum;
			bstToGst(root.left);
		}
		return root;
    }
}
